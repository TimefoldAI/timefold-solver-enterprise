name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Community Edition version (e.g. 1.0.0)'
        required: true
      sourceBranch:
        description: 'Branch to cut the release from'
        default: main
        required: true
      releaseBranch:
        description: 'Release branch to create (e.g. 1.0.x for version 1.0.0; once created, branch protection rules apply)'
        default: dry_run
        required: true
      nextVersion:
        description: 'Next version after release (e.g. 1.1.0, -SNAPSHOT will be added automatically)'
        required: true
      nextMicroVersion:
        description: 'Next version after release for release branch (e.g. 1.0.1, -SNAPSHOT will be added automatically)'
        required: true
      dryRun:
        description: 'Do a dry run? (true or false)'
        default: true
        required: true
jobs:
  build:
    env:
      MAVEN_ARGS: "--no-transfer-progress --batch-mode"
    runs-on: ubuntu-latest
    steps:
      - name: Print inputs to the release workflow
        run: echo "${{ toJSON(github.event.inputs) }}"
      - name: Checkout the relevant timefold-solver tag
        uses: actions/checkout@v3
        with:
          repository: "TimefoldAI/timefold-solver"
          path: "./timefold-solver"
          fetch-depth: 0
          ref: v${{ github.event.inputs.version }}

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # No need to wait for the upstream release to show up in Maven Central.
      - name: Build the upstream release tag
        working-directory: "./timefold-solver"
        run: |
          mvn -Dquickly install
          cd ..
          rm -rf timefold-solver

      - name: Checkout timefold-solver-enterprise
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create release branch and switch to it
        run: |
          git config user.name "Timefold Release Bot"
          git config user.email "release@timefold.ai"
          git checkout -b ${{ github.event.inputs.releaseBranch }}

      # We skip tests in dry run, to make the process faster.
      # Technically, this goes against the main reason for doing a dry run; to eliminate potential problems.
      # But unless something catastrophic happened, PR checks on source branch already ensured that all tests pass.
      # We also do not use versions:set, because we'd have to have the SNAPSHOT version built from somewhere,
      # and at this point in the release, there is no upstream branch anywhere that would have this version anymore.
      - name: Set release version and build release
        run: |
          export NEW_VERSION=${{ github.event.inputs.version }}
          .github/scripts/change_versions.sh
          mvn -Dfull deploy -DskipTests=${{ github.event.inputs.dryRun }} -DaltDeploymentRepository=local::default::file://`pwd`/target/staging-deploy

      # JReleaser requires the release branch to exist, so we need to push it before releasing.
      # Once this is pushed, branch protection rules apply.
      # So if any of the subsequent steps should fail, the release branch is there to stay; cannot be deleted.
      # To minimize that chance, do a dry run first, with a branch named in a way that the protection rules don't apply.
      - name: Push release branch to Git
        run: |
          git push origin ${{ github.event.inputs.releaseBranch }}

      - name: Run JReleaser
        uses: jreleaser/release-action@v2
        env:
          JRELEASER_DRY_RUN: ${{ github.event.inputs.dryRun }}
          JRELEASER_PROJECT_VERSION: ${{ github.event.inputs.version }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.JRELEASER_GITHUB_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}

      - name: JReleaser release output
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

      - name: Set micro snapshot version on the release branch
        run: |
          export NEW_VERSION="${{ github.event.inputs.nextMicroVersion }}-SNAPSHOT"
          .github/scripts/change_versions.sh

      # We do not use versions:set, because we'd have to have the SNAPSHOT version built from somewhere,
      # and at this point in the release, there is no upstream branch anywhere that would have this version anymore.
      - name: Switch back to source branch and set snapshot version
        run: |
          git checkout ${{ github.event.inputs.sourceBranch }}
          git checkout -B ${{ github.event.inputs.releaseBranch }}-bump
          export NEW_VERSION="${{ github.event.inputs.nextVersion }}-SNAPSHOT"
          .github/scripts/change_versions.sh

      # JReleaser should push the tag on its own, but it does not due to a bug.
      # https://github.com/jreleaser/jreleaser/issues/1425
      - name: Push branches to git
        run: |
          git push origin ${{ github.event.inputs.releaseBranch }}
          git push origin ${{ github.event.inputs.releaseBranch }}-bump
          git push origin --tags

      # There are some follow-up steps to continue the release.
      # They will be listed in the PR body.
      - name: Create pull request to bump the version
        run: |
          gh pr create --reviewer triceo,ge0ffrey --base ${{ github.event.inputs.sourceBranch }} --head ${{ github.event.inputs.releaseBranch }}-bump --title "chore: move to ${{ github.event.inputs.nextVersion }}-SNAPSHOT" --body-file .github/workflows/release-pr-body.md
        env:
          GITHUB_TOKEN: ${{ secrets.JRELEASER_GITHUB_TOKEN }}
